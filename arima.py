#!/usr/bin/env python
# -*- coding: utf-8 -*-

from config import cfg
from framework import fwk
import matplotlib.pyplot as plt
import pandas as pd
import statsmodels.api as sm
from statsmodels.graphics.api import qqplot
from statsmodels.tsa.arima_model import ARIMA
import matplotlib.dates as mdates
from datetime import datetime,timedelta

class arima():
    def __init__(self):
        self.day_history = 15
        self.dtype = "6hour"
        return

    def get_kline(self):
        pair = cfg.get_cfg("coin1")+cfg.get_cfg("coin2")
        limit = 1000
        if self.dtype == "1day":
            limit = min(limit, self.day_history)
        elif self.dtype == "6hour":
            limit = min(limit, self.day_history*4)
        elif self.dtype == "1hour":
            limit = min(limit, self.day_history*24)
        elif self.dtype == "1min":
            limit = min(limit, self.day_history*24*60)
        else:
            limit = 10

        #kl = fwk.get_K_line(pair, limit, self.dtype)
        kl = [[1531238400, 15.57, 16.777, 16.777, 15.57, 8.241335, 130.794423], [1531260000, 16.777, 15.8902, 17.77, 15.88, 5772.279701, 94101.985154], 
  [1531281600, 15.8902, 15.8011, 16.233, 15.6008, 2296.836999, 36745.802375], [1531303200, 15.8011, 15.8015, 16.69, 15.8011, 53.74219, 874.815594], 
  [1531324800, 15.8017, 15.8017, 16.83, 15.8016, 166.12222, 2625.066767], [1531346400, 15.8017, 15.8041, 16.5, 15.8017, 20.13398, 319.326878], 
  [1531368000, 15.8041, 15.8, 16.39, 15.56, 3759.484083, 59475.673779], [1531389600, 15.8, 15.96, 16.19, 15.56, 23431.511442, 374066.997695], 
  [1531411200, 16.0155, 16.0318, 16.1802, 15.5602, 35791.66087, 571768.623379], [1531432800, 16.0318, 16.76, 16.777, 15.5602, 9359.263048, 149816.68768], 
  [1531454400, 16.579999, 16.498999, 16.5999, 16.101, 200.194274, 3307.957549], [1531476000, 16.1019, 16.581299, 16.76, 16.1019, 1155.43576, 18830.866796], 
  [1531497600, 16.581299, 16.1014, 16.7769, 16.101, 230.575701, 3801.718633], [1531519200, 16.7768, 16.150099, 16.7768, 16.150099, 29.012514, 475.671111], 
  [1531540800, 16.150099, 16.1656, 16.68, 15.571, 303.23321, 4904.842744], [1531562400, 16.1656, 16.1001, 16.2985, 15.8001, 297.464046, 4782.992079], 
  [1531584000, 16.2985, 16.000599, 16.649999, 16.0001, 154.651982, 2532.043944], [1531605600, 16.035599, 16.0102, 16.3472, 16.001999, 9.741903, 156.302518], 
  [1531627200, 16.4072, 16.546299, 16.6779, 16.1814, 391.093418, 6415.453354], [1531648800, 16.4307, 16.83, 16.83, 16.4307, 497.882498, 8284.117333], 
  [1531670400, 16.7511, 16.6034, 16.813, 16.5184, 54.123908, 905.396097], [1531692000, 16.7619, 16.5392, 16.7619, 16.5207, 6327.368076, 105266.747015], 
  [1531713600, 16.5992, 16.787, 17.0, 16.5139, 6073.692338, 101011.922714], [1531735200, 17.0, 17.2844, 17.51, 16.9486, 732.723774, 12700.176246], 
  [1531756800, 17.2844, 17.5684, 17.77, 17.2, 2494.757639, 43270.007866], [1531778400, 17.4606, 17.3812, 17.4838, 17.1688, 3086.050798, 53674.88965], 
  [1531800000, 17.3812, 17.0108, 17.3812, 16.7163, 9097.794344, 156119.080143], [1531821600, 17.0723, 17.1365, 17.2791, 16.78, 9560.145125, 163536.097392], 
  [1531843200, 17.14, 17.9835, 18.1449, 16.9849, 4472.363958, 77542.745549], [1531864800, 17.7828, 18.1415, 18.3282, 17.7828, 7460.647689, 134955.751943], 
  [1531886400, 18.0001, 17.9099, 18.1139, 17.819, 9617.043248, 173097.844503], [1531908000, 17.9099, 17.79, 17.999, 17.7038, 8430.803231, 150773.816939], 
  [1531929600, 17.78, 17.3005, 18.15, 17.0429, 1792.67962, 31894.928991], [1531951200, 17.0495, 17.1903, 17.4126, 17.007, 8057.678205, 139179.553797],
  [1531972800, 17.2865, 17.6822, 17.8888, 17.2, 9269.524935, 162726.653094], [1531994400, 17.6822, 17.4, 17.891, 17.3546, 7985.841264, 140575.132602], 
  [1532016000, 17.3546, 17.3649, 17.861, 17.0779, 1681.011033, 29804.085009], [1532037600, 17.3649, 17.3962, 17.861, 17.0521, 243.515656, 4286.138338],
  [1532059200, 17.3961, 16.6067, 17.3961, 16.4492, 237.776142, 4064.915517], [1532080800, 16.7448, 16.6067, 17.05, 16.6067, 7531.996543, 127049.502144],
  [1532102400, 16.91, 15.9408, 17.0467, 15.7363, 1556.692221, 26026.95032], [1532124000, 16.123999, 16.1, 16.309999, 15.8429, 2970.71189, 47935.553783], 
  [1532145600, 15.9855, 16.358899, 16.756, 15.9706, 5748.043598, 93685.320481], [1532167200, 16.228, 16.4921, 16.592099, 16.1, 1402.393255, 23163.347508],
  [1532188800, 16.472, 16.3645, 16.4921, 16.3, 812.508068, 13391.753225], [1532210400, 16.3645, 16.169, 16.4816, 16.1526, 163.255134, 2665.605389],
  [1532232000, 16.169, 16.251999, 16.3202, 16.169, 101.008087, 1641.116287], [1532253600, 16.2329, 16.2669, 16.4816, 16.1569, 3981.05844, 65187.225962], 
  [1532275200, 16.46, 16.015899, 16.485199, 16.015899, 1409.641189, 23175.676369], [1532296800, 16.0, 16.522099, 16.7329, 16.0, 73.462258, 1187.466904], 
  [1532318400, 16.67, 16.2914, 16.67, 16.1557, 4851.197375, 80464.727159], [1532340000, 16.379999, 16.2175, 16.5515, 16.203299, 5253.804403, 85934.518065],
  [1532361600, 16.2056, 16.018999, 16.2056, 15.9, 165.66983, 2653.412256], [1532383200, 15.9413, 15.8, 16.1552, 15.8, 37.731338, 601.571992],
  [1532404800, 15.8, 16.537199, 16.67, 15.8, 315.080869, 5175.7515], 
        [1532426400, 16.5064, 16.6449, 16.8, 16.378799, 1362.282293, 22542.772831], [1532448000, 16.5024, 16.4856, 16.64, 16.3203, 2110.021083, 34747.200648], 
        [1532469600, 16.5163, 16.6387, 16.9359, 16.4401, 1182.548721, 19789.734283], [1532491200, 16.698699, 16.317599, 16.8733, 16.2808, 2599.105903, 43310.586087], 
        [1532512800, 16.3487, 16.2824, 16.4712, 16.078499, 1825.841144, 29789.252416]]
        return kl

    def get_date(self, *kl):
        if len(kl) == 0:
            kl = self.get_kline()
        else:
            kl = kl[0]
        #date = [mdates.epoch2num(i[0]) for i in kl]
        date = [datetime.fromtimestamp(i[0]) for i in kl]
        return date

    def get_close_price(self, *kl):
        if len(kl) == 0:
            kl = self.get_kline()
        else:
            kl = kl[0]
        cp = [i[1] for i in kl]
        #print("get_close_price", cp)
        return cp

    def orig_data_graphic(self):
        kl = self.get_kline()
        cp = self.get_close_price(kl)
        date = self.get_date(kl)
        dta = pd.Series(cp, index=date)
        fig = plt.figure(figsize=(12,8))
        ax1= fig.add_subplot(111)
        dta.plot(ax=ax1)
        plt.show()
        
    def diff_data_graphic(self):
        kl = self.get_kline()
        cp = self.get_close_price(kl)
        date = self.get_date(kl)
        dta = pd.Series(cp, index=date)
        fig = plt.figure(figsize=(12,8))
        ax1= fig.add_subplot(211)
        ax1.set_title("diff 1")
        diff1 = dta.diff(1)
        diff1.plot(ax=ax1)
        ax2= fig.add_subplot(212)
        ax2.set_title("diff 2")
        diff2 = dta.diff(2)
        diff2.plot(ax=ax2)
        plt.show()

    def acf_pacf(self):
        kl = self.get_kline()
        cp = self.get_close_price(kl)
        date = self.get_date(kl)
        dta = pd.Series(cp, index=date)
        diff1 = dta.diff(1)
        fig = plt.figure(figsize=(12,8))
        ax1=fig.add_subplot(211)
        fig = sm.graphics.tsa.plot_acf(dta,lags=40,ax=ax1)
        ax2 = fig.add_subplot(212)
        fig = sm.graphics.tsa.plot_pacf(dta,lags=40,ax=ax2)
        plt.show()
        
    def arima(self):
        kl = self.get_kline()
        cp = self.get_close_price(kl)
        date = self.get_date(kl)
        #t = datetime.fromtimestamp(date[-1].timestamp()+24*60*60)
        t = date[-1] + timedelta(days=int(self.day_history/5)) #days seconds ...
        print("predict date:", date[-1],"--->", t)

        dta = pd.Series(cp, index=date)
        print(dta)
        model=ARIMA(dta,order=(4,1,3)) #P D Q
        result=model.fit()
        pred=result.predict( date[-10], t,dynamic=True,typ='levels')
        plt.figure(figsize=(12,8))
        plt.plot(dta, 'ro-')
        plt.xticks(rotation=45)
        plt.plot(pred, 'go-')

        plt.show()



if __name__ == '__main__':
    a = arima()
    #a.diff_data_graphic()
    a.acf_pacf()
    a.arima()
    
